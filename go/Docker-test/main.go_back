package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"

	"github.com/gorilla/mux"
)

type output struct {
	Id       int
	User     string
	Comments int
	Title    string
	Body     string
}
type Post struct {
	UserId int
	Id     int
	Title  string
	Body   string
}

type User struct {
	Name string
}

type Comment struct {
	PostId int
}

const gorial_mux = true

func main() {
	if gorial_mux {
		r := mux.NewRouter()
		// Define the route and corresponding handler function
		r.HandleFunc("/posts/{id}", helloHandler)
		// Start the web server on port 8080
		fmt.Println("Server listening on http://localhost:8080")
		err := http.ListenAndServe(":8080", r)
		if err != nil {
			fmt.Println("Error starting the server:", err)
		}
	} else {

		// Define the route and corresponding handler function
		http.HandleFunc("/posts/", helloHandler)
		// Start the web server on port 8080
		fmt.Println("Server listening on http://localhost:8080")
		err := http.ListenAndServe(":8080", nil)
		if err != nil {
			fmt.Println("Error starting the server:", err)
		}
	}
}

func helloHandler(w http.ResponseWriter, r *http.Request) {
	var id string
	if gorial_mux {
		vars := mux.Vars(r)
		id = vars["id"]
	} else {
		//without gorril mux
		id = strings.TrimPrefix(r.URL.Path, "/posts/")
	}

	i, _ := strconv.Atoi(id)
	urlPosts := fmt.Sprintf("https://jsonplaceholder.typicode.com/posts/%d", i)
	resp, err := http.Get(urlPosts)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()
	body, err := io.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return
	}

	var post Post
	err = json.Unmarshal(body, &post)
	if err != nil {
		fmt.Println(err)
		return
	}

	urlUsr := fmt.Sprintf("https://jsonplaceholder.typicode.com/users/%d", post.UserId)
	respUser, err := http.Get(urlUsr)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer respUser.Body.Close()
	bodyUser, err := io.ReadAll(respUser.Body)
	if err != nil {
		fmt.Println(err)
		return
	}

	var user User
	err = json.Unmarshal(bodyUser, &user)
	if err != nil {
		fmt.Println(err)
		return
	}

	//
	url := fmt.Sprintf("https://jsonplaceholder.typicode.com/posts/%d/comments", post.Id)
	respComment, err := http.Get(url)
	if err != nil {
		fmt.Println(err)
		return
	}
	defer respComment.Body.Close()
	bodyComment, err := io.ReadAll(respComment.Body)
	if err != nil {
		fmt.Println(err)
		return
	}

	var comment []Comment
	err = json.Unmarshal(bodyComment, &comment)
	if err != nil {
		fmt.Println(err)
		return
	}
	//

	var out output
	out.Id = post.Id
	out.User = user.Name
	out.Comments = len(comment)

	d, err := json.Marshal(out)
	if err != nil {
		fmt.Println(err)
		return
	}
	w.Write(d)
}
